// Generated by view binder compiler. Do not edit!
package com.comp490.fridgemate.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.comp490.fridgemate.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class CreateRecipeBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final Button addIngredientButton;

  @NonNull
  public final Button addInstructionButton;

  @NonNull
  public final EditText editTextCookTime;

  @NonNull
  public final EditText editTextMealName;

  @NonNull
  public final EditText editTextMealServings;

  @NonNull
  public final EditText editTextPrepTime;

  @NonNull
  public final ImageView imageViewCreateMealImage;

  @NonNull
  public final RecyclerView recyclerCreateMealIngredients;

  @NonNull
  public final RecyclerView recyclerCreateMealInstructions;

  @NonNull
  public final Button saveButton;

  @NonNull
  public final TextView textViewMealSource;

  private CreateRecipeBinding(@NonNull LinearLayout rootView, @NonNull Button addIngredientButton,
      @NonNull Button addInstructionButton, @NonNull EditText editTextCookTime,
      @NonNull EditText editTextMealName, @NonNull EditText editTextMealServings,
      @NonNull EditText editTextPrepTime, @NonNull ImageView imageViewCreateMealImage,
      @NonNull RecyclerView recyclerCreateMealIngredients,
      @NonNull RecyclerView recyclerCreateMealInstructions, @NonNull Button saveButton,
      @NonNull TextView textViewMealSource) {
    this.rootView = rootView;
    this.addIngredientButton = addIngredientButton;
    this.addInstructionButton = addInstructionButton;
    this.editTextCookTime = editTextCookTime;
    this.editTextMealName = editTextMealName;
    this.editTextMealServings = editTextMealServings;
    this.editTextPrepTime = editTextPrepTime;
    this.imageViewCreateMealImage = imageViewCreateMealImage;
    this.recyclerCreateMealIngredients = recyclerCreateMealIngredients;
    this.recyclerCreateMealInstructions = recyclerCreateMealInstructions;
    this.saveButton = saveButton;
    this.textViewMealSource = textViewMealSource;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static CreateRecipeBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static CreateRecipeBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.create_recipe, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static CreateRecipeBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.add_ingredient_button;
      Button addIngredientButton = ViewBindings.findChildViewById(rootView, id);
      if (addIngredientButton == null) {
        break missingId;
      }

      id = R.id.add_instruction_button;
      Button addInstructionButton = ViewBindings.findChildViewById(rootView, id);
      if (addInstructionButton == null) {
        break missingId;
      }

      id = R.id.editText_cook_time;
      EditText editTextCookTime = ViewBindings.findChildViewById(rootView, id);
      if (editTextCookTime == null) {
        break missingId;
      }

      id = R.id.editText_meal_name;
      EditText editTextMealName = ViewBindings.findChildViewById(rootView, id);
      if (editTextMealName == null) {
        break missingId;
      }

      id = R.id.editText_meal_servings;
      EditText editTextMealServings = ViewBindings.findChildViewById(rootView, id);
      if (editTextMealServings == null) {
        break missingId;
      }

      id = R.id.editText_prep_time;
      EditText editTextPrepTime = ViewBindings.findChildViewById(rootView, id);
      if (editTextPrepTime == null) {
        break missingId;
      }

      id = R.id.imageView_create_meal_image;
      ImageView imageViewCreateMealImage = ViewBindings.findChildViewById(rootView, id);
      if (imageViewCreateMealImage == null) {
        break missingId;
      }

      id = R.id.recycler_create_meal_ingredients;
      RecyclerView recyclerCreateMealIngredients = ViewBindings.findChildViewById(rootView, id);
      if (recyclerCreateMealIngredients == null) {
        break missingId;
      }

      id = R.id.recycler_create_meal_instructions;
      RecyclerView recyclerCreateMealInstructions = ViewBindings.findChildViewById(rootView, id);
      if (recyclerCreateMealInstructions == null) {
        break missingId;
      }

      id = R.id.save_button;
      Button saveButton = ViewBindings.findChildViewById(rootView, id);
      if (saveButton == null) {
        break missingId;
      }

      id = R.id.textView_meal_source;
      TextView textViewMealSource = ViewBindings.findChildViewById(rootView, id);
      if (textViewMealSource == null) {
        break missingId;
      }

      return new CreateRecipeBinding((LinearLayout) rootView, addIngredientButton,
          addInstructionButton, editTextCookTime, editTextMealName, editTextMealServings,
          editTextPrepTime, imageViewCreateMealImage, recyclerCreateMealIngredients,
          recyclerCreateMealInstructions, saveButton, textViewMealSource);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
